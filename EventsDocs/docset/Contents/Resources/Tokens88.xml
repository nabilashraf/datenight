<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/SBJsonWriter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/SBJsonWriter</TokenIdentifier>
			<Abstract type="html">Options for the writer class.

This exists so the SBJSON facade can implement the options in the writer without having to re-declare them.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
            
			
			<NodeRef refid="88"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBJsonWriter/setHumanReadable:</TokenIdentifier>
			<Abstract type="html">Whether we are generating human-readable (multiline) JSON.

Set whether or not to generate human-readable JSON. The default is NO, which produces
JSON without any whitespace. (Except inside strings.) If set to YES, generates human-readable
JSON with linebreaks after each array value and dictionary key/value pair, indented two
spaces per nesting level.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL humanReadable</Declaration>
			
			
			<Anchor>//api/name/humanReadable</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBJsonWriter/humanReadable</TokenIdentifier>
			<Abstract type="html">Whether we are generating human-readable (multiline) JSON.

Set whether or not to generate human-readable JSON. The default is NO, which produces
JSON without any whitespace. (Except inside strings.) If set to YES, generates human-readable
JSON with linebreaks after each array value and dictionary key/value pair, indented two
spaces per nesting level.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL humanReadable</Declaration>
			
			
			<Anchor>//api/name/humanReadable</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/SBJsonWriter/humanReadable</TokenIdentifier>
			<Abstract type="html">Whether we are generating human-readable (multiline) JSON.

Set whether or not to generate human-readable JSON. The default is NO, which produces
JSON without any whitespace. (Except inside strings.) If set to YES, generates human-readable
JSON with linebreaks after each array value and dictionary key/value pair, indented two
spaces per nesting level.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL humanReadable</Declaration>
			
			
			<Anchor>//api/name/humanReadable</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBJsonWriter/setSortKeys:</TokenIdentifier>
			<Abstract type="html">Whether or not to sort the dictionary keys in the output.

If this is set to YES, the dictionary keys in the JSON output will be in sorted order.
(This is useful if you need to compare two structures, for example.) The default is NO.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL sortKeys</Declaration>
			
			
			<Anchor>//api/name/sortKeys</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBJsonWriter/sortKeys</TokenIdentifier>
			<Abstract type="html">Whether or not to sort the dictionary keys in the output.

If this is set to YES, the dictionary keys in the JSON output will be in sorted order.
(This is useful if you need to compare two structures, for example.) The default is NO.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL sortKeys</Declaration>
			
			
			<Anchor>//api/name/sortKeys</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/SBJsonWriter/sortKeys</TokenIdentifier>
			<Abstract type="html">Whether or not to sort the dictionary keys in the output.

If this is set to YES, the dictionary keys in the JSON output will be in sorted order.
(This is useful if you need to compare two structures, for example.) The default is NO.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>@property BOOL sortKeys</Declaration>
			
			
			<Anchor>//api/name/sortKeys</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBJsonWriter/stringWithObject:</TokenIdentifier>
			<Abstract type="html">Return JSON representation (or fragment) for the given object.

Returns a string containing JSON representation of the passed in value, or nil on error.
If nil is returned and @p error is not NULL, @p *error can be interrogated to find the cause of the error.</Abstract>
			<DeclaredIn>SBJsonWriter.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringWithObject:(id)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">any instance that can be represented as a JSON fragment</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stringWithObject:</Anchor>
            <NodeRef refid="88"/>
		</Token>
		
        
        
	</File>
</Tokens>