<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/MKAnnotationView+WebCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/MKAnnotationView(WebCache)</TokenIdentifier>
			<Abstract type="html">Integrates SDWebImage async downloading and caching of remote images with MKAnnotationView.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
            
			
			<NodeRef refid="61"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:placeholderImage:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url and a placeholder.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:placeholderImage:options:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter><Parameter>
					<Name>placeholder</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:placeholderImage:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:placeholderImage:options:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url, placeholder and custom options.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter><Parameter>
					<Name>placeholder</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options to use when downloading the image. @see SDWebImageOptions for the possible values.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:placeholderImage:options:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:completed:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url completed:(SDWebImageCompletedBlock)completedBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter><Parameter>
					<Name>completedBlock</Name>
					<Abstract type="html">A block called when operation has been completed. This block as no return value
and takes the requested UIImage as first parameter. In case of error the image parameter
is nil and the second parameter may contain an NSError. The third parameter is a Boolean
indicating if the image was retrived from the local cache of from the network.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:completed:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:placeholderImage:completed:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url, placeholder.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder completed:(SDWebImageCompletedBlock)completedBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter><Parameter>
					<Name>placeholder</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes.</Abstract>
				</Parameter><Parameter>
					<Name>completedBlock</Name>
					<Abstract type="html">A block called when operation has been completed. This block as no return value
and takes the requested UIImage as first parameter. In case of error the image parameter
is nil and the second parameter may contain an NSError. The third parameter is a Boolean
indicating if the image was retrived from the local cache of from the network.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:placeholderImage:completed:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/setImageWithURL:placeholderImage:options:completed:</TokenIdentifier>
			<Abstract type="html">Set the imageView image with an url, placeholder and custom options.</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options completed:(SDWebImageCompletedBlock)completedBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url for the image.</Abstract>
				</Parameter><Parameter>
					<Name>placeholder</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options to use when downloading the image. @see SDWebImageOptions for the possible values.</Abstract>
				</Parameter><Parameter>
					<Name>completedBlock</Name>
					<Abstract type="html">A block called when operation has been completed. This block as no return value
and takes the requested UIImage as first parameter. In case of error the image parameter
is nil and the second parameter may contain an NSError. The third parameter is a Boolean
indicating if the image was retrived from the local cache of from the network.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:placeholderImage:options:completed:</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MKAnnotationView/cancelCurrentImageLoad</TokenIdentifier>
			<Abstract type="html">Cancel the current download</Abstract>
			<DeclaredIn>MKAnnotationView+WebCache.h</DeclaredIn>
			
			<Declaration>- (void)cancelCurrentImageLoad</Declaration>
			
			
			<Anchor>//api/name/cancelCurrentImageLoad</Anchor>
            <NodeRef refid="61"/>
		</Token>
		
        
        
	</File>
</Tokens>