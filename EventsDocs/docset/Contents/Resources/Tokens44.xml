<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SBJSON.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SBJSON</TokenIdentifier>
			<Abstract type="html">Facade for SBJsonWriter/SBJsonParser.

Requests are forwarded to instances of SBJsonWriter and SBJsonParser.</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
            
			
			<NodeRef refid="44"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/fragmentWithString:error:</TokenIdentifier>
			<Abstract type="html">Return the fragment represented by the given string</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (id)fragmentWithString:(NSString *)jsonrep error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/fragmentWithString:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/objectWithString:error:</TokenIdentifier>
			<Abstract type="html">Return the object represented by the given string</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (id)objectWithString:(NSString *)jsonrep error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/objectWithString:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/objectWithString:allowScalar:error:</TokenIdentifier>
			<Abstract type="html">Parse the string and return the represented object (or scalar)</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (id)objectWithString:(id)value allowScalar:(BOOL)x error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/objectWithString:allowScalar:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/stringWithObject:error:</TokenIdentifier>
			<Abstract type="html">Return JSON representation of an array  or dictionary</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringWithObject:(id)value error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/stringWithObject:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/stringWithFragment:error:</TokenIdentifier>
			<Abstract type="html">Return JSON representation of any legal JSON value</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringWithFragment:(id)value error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/stringWithFragment:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/stringWithObject:allowScalar:error:</TokenIdentifier>
			<Abstract type="html">Return JSON representation (or fragment) for the given object</Abstract>
			<DeclaredIn>SBJSON.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringWithObject:(id)value allowScalar:(BOOL)x error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/stringWithObject:allowScalar:error:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/stringWithObject:</TokenIdentifier>
			<Abstract type="html">Return JSON representation (or fragment) for the given object.

Returns a string containing JSON representation of the passed in value, or nil on error.
If nil is returned and @p error is not NULL, @p *error can be interrogated to find the cause of the error.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (NSString *)stringWithObject:(id)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">any instance that can be represented as a JSON fragment</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stringWithObject:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/objectWithString:</TokenIdentifier>
			<Abstract type="html">Return the object represented by the given string.

Returns the object represented by the passed-in string or nil on error. The returned object can be
a string, number, boolean, null, array or dictionary.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (id)objectWithString:(NSString *)repr</Declaration>
			<Parameters>
				<Parameter>
					<Name>repr</Name>
					<Abstract type="html">the json string to parse</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/objectWithString:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/maxDepth</TokenIdentifier>
			<Abstract type="html">The maximum recursing depth.

Defaults to 512. If the input is nested deeper than this the input will be deemed to be
malicious and the parser returns nil, signalling an error. (&quot;Nested too deep&quot;.) You can
turn off this security feature by setting the maxDepth value to 0.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (NSUInteger)maxDepth</Declaration>
			
			
			<Anchor>//api/name/maxDepth</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/setMaxDepth:</TokenIdentifier>
			<Abstract type="html">The maximum recursing depth.

Defaults to 512. If the input is nested deeper than this the input will be deemed to be
malicious and the parser returns nil, signalling an error. (&quot;Nested too deep&quot;.) You can
turn off this security feature by setting the maxDepth value to 0.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (void)setMaxDepth:(NSUInteger)d</Declaration>
			
			
			<Anchor>//api/name/setMaxDepth:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/humanReadable</TokenIdentifier>
			<Abstract type="html">Whether we are generating human-readable (multiline) JSON.

Set whether or not to generate human-readable JSON. The default is NO, which produces
JSON without any whitespace. (Except inside strings.) If set to YES, generates human-readable
JSON with linebreaks after each array value and dictionary key/value pair, indented two
spaces per nesting level.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (BOOL)humanReadable</Declaration>
			
			
			<Anchor>//api/name/humanReadable</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/setHumanReadable:</TokenIdentifier>
			<Abstract type="html">Whether we are generating human-readable (multiline) JSON.

Set whether or not to generate human-readable JSON. The default is NO, which produces
JSON without any whitespace. (Except inside strings.) If set to YES, generates human-readable
JSON with linebreaks after each array value and dictionary key/value pair, indented two
spaces per nesting level.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (void)setHumanReadable:(BOOL)x</Declaration>
			
			
			<Anchor>//api/name/setHumanReadable:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/sortKeys</TokenIdentifier>
			<Abstract type="html">Whether or not to sort the dictionary keys in the output.

If this is set to YES, the dictionary keys in the JSON output will be in sorted order.
(This is useful if you need to compare two structures, for example.) The default is NO.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (BOOL)sortKeys</Declaration>
			
			
			<Anchor>//api/name/sortKeys</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBJSON/setSortKeys:</TokenIdentifier>
			<Abstract type="html">Whether or not to sort the dictionary keys in the output.

If this is set to YES, the dictionary keys in the JSON output will be in sorted order.
(This is useful if you need to compare two structures, for example.) The default is NO.</Abstract>
			<DeclaredIn>SBJSON.m</DeclaredIn>
			
			<Declaration>- (void)setSortKeys:(BOOL)x</Declaration>
			
			
			<Anchor>//api/name/setSortKeys:</Anchor>
            <NodeRef refid="44"/>
		</Token>
		
        
        
	</File>
</Tokens>